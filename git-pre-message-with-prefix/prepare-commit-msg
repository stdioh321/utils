#!/bin/bash

# Get the commit message file path
COMMIT_MSG_FILE=$1
BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
PREFIXES=("feat" "fix" "docs" "style" "refactor" "test" "chore" "perf" "ci")
DEFAULT_PREFIX="chore"

# Function to extract the prefix from the commit message
function extract_prefix {
  for prefix in "${PREFIXES[@]}"; do
    if [[ "$1" == "$prefix"* ]]; then
      echo $prefix
      return 0
    fi
  done
  return 1
}

# Read the commit message
ORIGINAL_MESSAGE=$(cat "$COMMIT_MSG_FILE")

# Extract the existing prefix (if any)
EXISTING_PREFIX=$(extract_prefix "$ORIGINAL_MESSAGE")

# Process the commit message
NEW_MESSAGE=$ORIGINAL_MESSAGE

if [ -z "$EXISTING_PREFIX" ]; then
  # Add default prefix and branch name
  NEW_MESSAGE="$DEFAULT_PREFIX($BRANCH_NAME): $ORIGINAL_MESSAGE"
else
  # Check if branch name is included after the existing prefix
  if [[ ! "$ORIGINAL_MESSAGE" == *"$BRANCH_NAME:"* ]]; then
    NEW_MESSAGE="${EXISTING_PREFIX}($BRANCH_NAME): ${ORIGINAL_MESSAGE#*: }"
  fi
fi

# Get list of files for the commit
NEW_FILES=$(git diff --cached --name-status | grep '^A' | cut -f2-)
EDITED_FILES=$(git diff --cached --name-status | grep '^M' | cut -f2-)
DELETED_FILES=$(git diff --cached --name-status | grep '^D' | cut -f2-)

# Append the file lists to the message
NEW_MESSAGE="$NEW_MESSAGE

# Files
NEW: ${NEW_FILES//[$'\n']/, }
EDITED: ${EDITED_FILES//[$'\n']/, }
DELETED: ${DELETED_FILES//[$'\n']/, }"

# Write the new commit message to the file
echo "$NEW_MESSAGE" > "$COMMIT_MSG_FILE"
