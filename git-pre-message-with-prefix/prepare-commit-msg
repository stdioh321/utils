#!/bin/bash

# The commit message file
COMMIT_MSG_FILE=$1

# Read the commit message
COMMIT_MSG=$(cat $COMMIT_MSG_FILE)

# Get the current branch name
BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)

# Define the default prefix
DEFAULT_PREFIX="chore"

# Define allowed prefixes
PREFIXES="feat|fix|docs|style|refactor|test|chore|perf|ci"

# Extract the prefix if it exists
if [[ $COMMIT_MSG =~ ^\s*($PREFIXES)\((.*)\):(.*)$ ]]; then
    PREFIX=${BASH_REMATCH[1]}
    EXISTING_BRANCH_NAME=${BASH_REMATCH[2]}
    REST_OF_MESSAGE=${BASH_REMATCH[3]}
    if [[ $EXISTING_BRANCH_NAME == $BRANCH_NAME ]]; then
        # Prefix and branch name already exist, do nothing
        FINAL_COMMIT_MSG=$COMMIT_MSG
    else
        # Prefix exists but branch name does not
        FINAL_COMMIT_MSG="$PREFIX($BRANCH_NAME): $REST_OF_MESSAGE"
    fi
else
    # Prefix does not exist, add default prefix and branch name
    FINAL_COMMIT_MSG="$DEFAULT_PREFIX($BRANCH_NAME): $COMMIT_MSG"
fi

# Gather the list of new, edited, and deleted files
NEW_FILES=$(git diff --cached --name-status | grep "^A" | cut -f2)
EDITED_FILES=$(git diff --cached --name-status | grep "^M" | cut -f2)
DELETED_FILES=$(git diff --cached --name-status | grep "^D" | cut -f2)

# Convert the lists to comma-separated strings
if [ -n "$NEW_FILES" ]; then
    NEW_FILES_LIST=$(echo "$NEW_FILES" | tr '\n' ', ' | sed 's/, $//')
else
    NEW_FILES_LIST=""
fi

if [ -n "$EDITED_FILES" ]; then
    EDITED_FILES_LIST=$(echo "$EDITED_FILES" | tr '\n' ', ' | sed 's/, $//')
else
    EDITED_FILES_LIST=""
fi

if [ -n "$DELETED_FILES" ]; then
    DELETED_FILES_LIST=$(echo "$DELETED_FILES" | tr '\n' ', ' | sed 's/, $//')
else
    DELETED_FILES_LIST=""
fi

# Append the file lists to the commit message
FINAL_COMMIT_MSG="$FINAL_COMMIT_MSG

# Files
NEW: $NEW_FILES_LIST
EDITED: $EDITED_FILES_LIST
DELETED: $DELETED_FILES_LIST"

# Write the final commit message back to the file
echo "$FINAL_COMMIT_MSG" > $COMMIT_MSG_FILE
